name: CI

on: [push, pull_request, workflow_dispatch]

jobs:
  build:
    name: "${{ matrix.platform.name }} | Build: ${{ matrix.build.name }}"
    runs-on: ${{ matrix.platform.os }}

    strategy:
      fail-fast: false
      matrix:
        platform:
          - { name: Windows VS 2022, os: windows-2022 }
          - { name: Windows VS 2022 ClangCL, os: windows-2022, flags: -T ClangCL, install-llvm: true }
        build:
          - { name: Debug }
          - { name: Release }

    steps:
    - name: Checkout
      uses: actions/checkout@v4.1.1

    - name: Cache CMake dependency source code
      uses: actions/cache@v4
      env:
        cache-name: cache-cmake-dependency-sources
      with:
        path: ${{github.workspace}}/build/_deps/*-src
        key: ${{env.cache-name}}-${{hashFiles('**/CMakeLists.txt', 'cmake/**')}}
        restore-keys: ${{env.cache-name}}-
      
    # - name: Cache CMake dependency build directories
    #   uses: actions/cache@v4
    #   env:
    #     cache-name: cache-cmake-dependency-build-directories
    #   with:
    #     path: |
    #       ${{github.workspace}}/build/_deps/*-build
    #       ${{github.workspace}}/build/_deps/*-subbuild
    #     key: ${{env.cache-name}}-${{matrix.platform.os}}-${{matrix.build.name}}-${{hashFiles('**/CMakeLists.txt', 'cmake/**')}}

    - name: Cache Install LLVM
      id: cache-llvm
      uses: actions/cache@v4.0.2
      with:
        path: "C:/Program Files/LLVM"
        key: cache-llvm-18-1-2

    - name: Install LLVM
      if: steps.cache-llvm.outputs.cache-hit != 'true'
      run: |
        curl -Lo "${{runner.temp}}/llvm-download.tar.xz" https://github.com/llvm/llvm-project/releases/download/llvmorg-18.1.2/clang+llvm-18.1.2-x86_64-pc-windows-msvc.tar.xz
        7z x "${{runner.temp}}/llvm-download.tar.xz" "-o${{runner.temp}}" -y
        7z x "${{runner.temp}}/llvm-download.tar" "-o${{runner.temp}}" -y
        xcopy "${{runner.temp}}\clang+llvm-18.1.2-x86_64-pc-windows-msvc" "C:\Program Files\LLVM" /e /y

    - name: Configure CMake
      run: cmake -B build -D CMAKE_BUILD_TYPE=${{ matrix.build.name }} -D CMAKE_UNITY_BUILD=TRUE ${{ matrix.platform.flags }}

    - name: Build
      run: cmake --build build --config ${{ matrix.build.name }}

    - name: Run tests
      run: cmake --build build --config ${{ matrix.build.name }} --target run-betterstring-test
      
    - name: Run fuzzer
      run: cmake --build build --config ${{ matrix.build.name }} --target run-betterstring-fuzz

    - name: Upload fuzzer artifacts
      uses: actions/upload-artifact@v4.3.1
      with:
        name: fuzzer-artifacts
        path: build/crash-*
        if-no-files-found: ignore

  clang-tidy:
    name: Clang Tidy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4.1.1

    - name: Get CMake and Ninja
      uses: lukka/get-cmake@latest
      with:
        cmakeVersion: "3.24.0"
        ninjaVersion: "latest"

    - name: Configure CMake
      run: >
        cmake -B build -G Ninja
        -D CMAKE_BUILD_TYPE=Debug -D USE_SANITIZERS=FALSE -D BUILD_BENCHMARK=FALSE -D USE_CLANG_TIDY=TRUE
    
    - name: Analyze Code
      run: cmake --build build --target clang-tidy

    


    